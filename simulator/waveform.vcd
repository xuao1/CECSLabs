$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 .' araddr [31:0] $end
  $var wire  2 3' arburst [1:0] $end
  $var wire  8 1' arlen [7:0] $end
  $var wire  1 0' arready [0:0] $end
  $var wire  3 2' arsize [2:0] $end
  $var wire  1 /' arvalid [0:0] $end
  $var wire 32 9' awaddr [31:0] $end
  $var wire  2 >' awburst [1:0] $end
  $var wire  8 <' awlen [7:0] $end
  $var wire  1 ;' awready [0:0] $end
  $var wire  3 =' awsize [2:0] $end
  $var wire  1 :' awvalid [0:0] $end
  $var wire  1 F' bready [0:0] $end
  $var wire  2 D' bresp [1:0] $end
  $var wire  1 E' bvalid [0:0] $end
  $var wire  1 ,' clk [0:0] $end
  $var wire  1 G' commit_wb [0:0] $end
  $var wire 32 I' inst [31:0] $end
  $var wire 32 J' pc_cur [31:0] $end
  $var wire 32 4' rdata [31:0] $end
  $var wire  1 8' rlast [0:0] $end
  $var wire  1 7' rready [0:0] $end
  $var wire  2 5' rresp [1:0] $end
  $var wire  1 -' rstn [0:0] $end
  $var wire  1 6' rvalid [0:0] $end
  $var wire  1 H' uncache_read_wb [0:0] $end
  $var wire 32 ?' wdata [31:0] $end
  $var wire  1 C' wlast [0:0] $end
  $var wire  1 B' wready [0:0] $end
  $var wire  4 @' wstrb [3:0] $end
  $var wire  1 A' wvalid [0:0] $end
  $scope module CPU $end
   $var wire  1 -! EX_LS_flush [0:0] $end
   $var wire  1 +! EX_LS_stall [0:0] $end
   $var wire  1 ,! ID_EX_flush [0:0] $end
   $var wire  1 +! ID_EX_stall [0:0] $end
   $var wire  1 '! IF1_IF2_flush [0:0] $end
   $var wire  1 (! IF1_IF2_stall [0:0] $end
   $var wire  1 *! IF2_ID_flush [0:0] $end
   $var wire  1 )! IF2_ID_stall [0:0] $end
   $var wire 32 L' INDEX_WIDTH [31:0] $end
   $var wire  1 -! LS_WB_flush [0:0] $end
   $var wire  1 +! LS_WB_stall [0:0] $end
   $var wire 32 K' PC_RESET_VALUE [31:0] $end
   $var wire 32 M' WORD_OFFSET_WIDTH [31:0] $end
   $var wire  5 e alu_op_ex [4:0] $end
   $var wire  5 d alu_op_id [4:0] $end
   $var wire 32 W alu_result_ex [31:0] $end
   $var wire 32 X alu_result_ls [31:0] $end
   $var wire 32 Y alu_result_wb [31:0] $end
   $var wire 32 S alu_rf_data1 [31:0] $end
   $var wire 32 T alu_rf_data2 [31:0] $end
   $var wire 32 U alu_rs1 [31:0] $end
   $var wire  2 r alu_rs1_sel_ex [1:0] $end
   $var wire  2 q alu_rs1_sel_id [1:0] $end
   $var wire 32 V alu_rs2 [31:0] $end
   $var wire  2 t alu_rs2_sel_ex [1:0] $end
   $var wire  2 s alu_rs2_sel_id [1:0] $end
   $var wire 32 .' araddr [31:0] $end
   $var wire  2 3' arburst [1:0] $end
   $var wire  8 1' arlen [7:0] $end
   $var wire  1 0' arready [0:0] $end
   $var wire  3 2' arsize [2:0] $end
   $var wire  1 /' arvalid [0:0] $end
   $var wire 32 9' awaddr [31:0] $end
   $var wire  2 >' awburst [1:0] $end
   $var wire  8 <' awlen [7:0] $end
   $var wire  1 ;' awready [0:0] $end
   $var wire  3 =' awsize [2:0] $end
   $var wire  1 :' awvalid [0:0] $end
   $var wire  5 j br_type_ex [4:0] $end
   $var wire  5 i br_type_id [4:0] $end
   $var wire  1 F' bready [0:0] $end
   $var wire  2 D' bresp [1:0] $end
   $var wire  1 E' bvalid [0:0] $end
   $var wire  1 ,' clk [0:0] $end
   $var wire  1 1! commit_ex [0:0] $end
   $var wire  1 0! commit_id [0:0] $end
   $var wire  1 -' commit_if1 [0:0] $end
   $var wire  1 /! commit_if2 [0:0] $end
   $var wire  1 2! commit_ls [0:0] $end
   $var wire  1 G' commit_wb [0:0] $end
   $var wire 32 I csr_rdata_ex [31:0] $end
   $var wire 32 H csr_rdata_id [31:0] $end
   $var wire 32 J csr_wdata_ex [31:0] $end
   $var wire 32 K csr_wdata_ls [31:0] $end
   $var wire 32 L csr_wdata_wb [31:0] $end
   $var wire  1 #! d_bready [0:0] $end
   $var wire  1 1 d_bvalid [0:0] $end
   $var wire 32 ` d_raddr [31:0] $end
   $var wire 32 4' d_rdata [31:0] $end
   $var wire  1 / d_rlast [0:0] $end
   $var wire  8 <' d_rlen [7:0] $end
   $var wire  1 . d_rready [0:0] $end
   $var wire  3 p d_rsize [2:0] $end
   $var wire  1 ~ d_rvalid [0:0] $end
   $var wire 32 9' d_waddr [31:0] $end
   $var wire 32 ?' d_wdata [31:0] $end
   $var wire  1 "! d_wlast [0:0] $end
   $var wire  8 <' d_wlen [7:0] $end
   $var wire  1 0 d_wready [0:0] $end
   $var wire  3 O' d_wsize [2:0] $end
   $var wire  4 @' d_wstrb [3:0] $end
   $var wire  1 !! d_wvalid [0:0] $end
   $var wire  1 +! dcache_miss [0:0] $end
   $var wire 32 ^ dcache_rdata_ls [31:0] $end
   $var wire 32 Q forward1_data [31:0] $end
   $var wire  1 $! forward1_en [0:0] $end
   $var wire 32 R forward2_data [31:0] $end
   $var wire  1 %! forward2_en [0:0] $end
   $var wire 32 _ i_raddr [31:0] $end
   $var wire 32 4' i_rdata [31:0] $end
   $var wire  1 - i_rlast [0:0] $end
   $var wire  8 N' i_rlen [7:0] $end
   $var wire  1 , i_rready [0:0] $end
   $var wire  3 O' i_rsize [2:0] $end
   $var wire  1 } i_rvalid [0:0] $end
   $var wire  1 '! icache_flush [0:0] $end
   $var wire  1 .! icache_miss [0:0] $end
   $var wire  1 )! icache_stall [0:0] $end
   $var wire 32 F imm_ex [31:0] $end
   $var wire 32 E imm_id [31:0] $end
   $var wire 32 I' inst [31:0] $end
   $var wire 32 @ inst_ex [31:0] $end
   $var wire 32 ? inst_id [31:0] $end
   $var wire 32 > inst_if2 [31:0] $end
   $var wire 32 A inst_ls [31:0] $end
   $var wire 32 B inst_wb [31:0] $end
   $var wire  1 -' ip_rvalid_if1 [0:0] $end
   $var wire  1 &! jump [0:0] $end
   $var wire 32 Z jump_target [31:0] $end
   $var wire 32 c mcause_global [31:0] $end
   $var wire  5 g mem_access_ex [4:0] $end
   $var wire  5 f mem_access_id [4:0] $end
   $var wire  5 h mem_access_ls [4:0] $end
   $var wire 32 \ mem_rdata_ls [31:0] $end
   $var wire 32 ] mem_rdata_wb [31:0] $end
   $var wire 32 [ mem_wdata_ex [31:0] $end
   $var wire 32 a mepc_global [31:0] $end
   $var wire 32 b mtvec_global [31:0] $end
   $var wire 32 D next_pc [31:0] $end
   $var wire 32 J' pc_cur [31:0] $end
   $var wire 32 ; pc_ex [31:0] $end
   $var wire 32 : pc_id [31:0] $end
   $var wire 32 8 pc_if1 [31:0] $end
   $var wire 32 9 pc_if2 [31:0] $end
   $var wire 32 < pc_ls [31:0] $end
   $var wire  1 '! pc_set [0:0] $end
   $var wire  1 (! pc_stall [0:0] $end
   $var wire 32 C pc_target [31:0] $end
   $var wire 32 = pc_wb [31:0] $end
   $var wire  5 l priv_vec_ex [4:0] $end
   $var wire  5 k priv_vec_id [4:0] $end
   $var wire  5 m priv_vec_ls [4:0] $end
   $var wire  5 n priv_vec_wb [4:0] $end
   $var wire 32 4' rdata [31:0] $end
   $var wire 32 N rf_rdata1_ex [31:0] $end
   $var wire 32 M rf_rdata1_id [31:0] $end
   $var wire 32 P rf_rdata2_ex [31:0] $end
   $var wire 32 O rf_rdata2_id [31:0] $end
   $var wire 32 G rf_wdata_wb [31:0] $end
   $var wire  1 z rf_we_ex [0:0] $end
   $var wire  1 y rf_we_id [0:0] $end
   $var wire  1 { rf_we_ls [0:0] $end
   $var wire  1 | rf_we_wb [0:0] $end
   $var wire  1 8' rlast [0:0] $end
   $var wire  1 7' rready [0:0] $end
   $var wire  2 5' rresp [1:0] $end
   $var wire  1 -' rstn [0:0] $end
   $var wire  1 6' rvalid [0:0] $end
   $var wire  1 H' uncache_read_wb [0:0] $end
   $var wire  1 v wb_rf_sel_ex [0:0] $end
   $var wire  1 u wb_rf_sel_id [0:0] $end
   $var wire  1 w wb_rf_sel_ls [0:0] $end
   $var wire  1 x wb_rf_sel_wb [0:0] $end
   $var wire 32 ?' wdata [31:0] $end
   $var wire  1 C' wlast [0:0] $end
   $var wire  1 B' wready [0:0] $end
   $var wire  4 @' wstrb [3:0] $end
   $var wire  4 o wstrb_ex [3:0] $end
   $var wire  1 A' wvalid [0:0] $end
   $scope module ALU_inst $end
    $var wire  5 e alu_op [4:0] $end
    $var wire 32 W result [31:0] $end
    $var wire 64 3! result_64 [63:0] $end
    $var wire 32 5! result_div [31:0] $end
    $var wire 32 6! result_rem [31:0] $end
    $var wire  2 7! sign [1:0] $end
    $var wire 32 U sr1 [31:0] $end
    $var wire 32 8! sr1_abs [31:0] $end
    $var wire 32 V sr2 [31:0] $end
    $var wire 32 9! sr2_abs [31:0] $end
   $upscope $end
   $scope module ALU_rf_data1_mux $end
    $var wire 32 P' WIDTH [31:0] $end
    $var wire 32 N din1 [31:0] $end
    $var wire 32 Q din2 [31:0] $end
    $var wire 32 S dout [31:0] $end
    $var wire  1 $! sel [0:0] $end
   $upscope $end
   $scope module ALU_rf_data2_mux $end
    $var wire 32 P' WIDTH [31:0] $end
    $var wire 32 P din1 [31:0] $end
    $var wire 32 R din2 [31:0] $end
    $var wire 32 T dout [31:0] $end
    $var wire  1 %! sel [0:0] $end
   $upscope $end
   $scope module ALU_rs1_mux $end
    $var wire 32 P' WIDTH [31:0] $end
    $var wire 32 S din1 [31:0] $end
    $var wire 32 ; din2 [31:0] $end
    $var wire 32 Q' din3 [31:0] $end
    $var wire 32 Q' din4 [31:0] $end
    $var wire 32 U dout [31:0] $end
    $var wire  2 r sel [1:0] $end
   $upscope $end
   $scope module ALU_rs2_mux $end
    $var wire 32 P' WIDTH [31:0] $end
    $var wire 32 T din1 [31:0] $end
    $var wire 32 F din2 [31:0] $end
    $var wire 32 R' din3 [31:0] $end
    $var wire 32 I din4 [31:0] $end
    $var wire 32 V dout [31:0] $end
    $var wire  2 t sel [1:0] $end
   $upscope $end
   $scope module Branch_inst $end
    $var wire  5 j br_type [4:0] $end
    $var wire 32 F imm [31:0] $end
    $var wire  1 :! is_branch $end
    $var wire  1 ;! is_jal $end
    $var wire  1 <! is_jalr $end
    $var wire  1 &! jump [0:0] $end
    $var wire 32 Z jump_target [31:0] $end
    $var wire 32 ; pc [31:0] $end
    $var wire 32 S sr1 [31:0] $end
    $var wire 32 T sr2 [31:0] $end
   $upscope $end
   $scope module CSR_inst $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 -! has_exp $end
    $var wire 32 A! mcause [31:0] $end
    $var wire 32 c mcause_in [31:0] $end
    $var wire 32 a mepc [31:0] $end
    $var wire 32 a mepc_out [31:0] $end
    $var wire 32 @! mstatus [31:0] $end
    $var wire 32 b mtvec [31:0] $end
    $var wire 32 b mtvec_out [31:0] $end
    $var wire 32 = pc_wb [31:0] $end
    $var wire  5 n priv_vec_wb [4:0] $end
    $var wire 12 =! raddr [11:0] $end
    $var wire 32 H rdata [31:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire 12 >! waddr [11:0] $end
    $var wire 32 L wdata [31:0] $end
    $var wire  1 ?! we [0:0] $end
   $upscope $end
   $scope module DCache_Read_Ctrl_inst $end
    $var wire 32 C! load_data [31:0] $end
    $var wire  3 B! load_type [2:0] $end
    $var wire  5 h mem_access [4:0] $end
    $var wire 32 X mem_raddr [31:0] $end
    $var wire 32 ^ mem_rdata [31:0] $end
    $var wire 32 \ rdata [31:0] $end
   $upscope $end
   $scope module DCache_Write_Ctrl_inst $end
    $var wire  1 D! is_store $end
    $var wire  5 g mem_access [4:0] $end
    $var wire 32 W mem_waddr [31:0] $end
    $var wire 32 [ mem_wdata [31:0] $end
    $var wire  3 E! store_type [2:0] $end
    $var wire 32 T wdata [31:0] $end
    $var wire  4 o wstrb [3:0] $end
   $upscope $end
   $scope module DCache_inst $end
    $var wire 32 U' BIT_NUM [31:0] $end
    $var wire 32 T' BYTE_NUM [31:0] $end
    $var wire 32 L' BYTE_OFFSET_WIDTH [31:0] $end
    $var wire 32 L' INDEX_WIDTH [31:0] $end
    $var wire 32 T' SET_NUM [31:0] $end
    $var wire 32 S' TAG_WIDTH [31:0] $end
    $var wire 32 L' WORD_NUM [31:0] $end
    $var wire 32 M' WORD_OFFSET_WIDTH [31:0] $end
    $var wire 32 W addr [31:0] $end
    $var wire  5 4" addr_cnt [4:0] $end
    $var wire  1 5" addr_cnt_add $end
    $var wire 32 K! addr_pipe [31:0] $end
    $var wire  1 p! cache_hit $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 #! d_bready [0:0] $end
    $var wire  1 1 d_bvalid [0:0] $end
    $var wire 32 ` d_raddr [31:0] $end
    $var wire 32 4' d_rdata [31:0] $end
    $var wire  1 / d_rlast [0:0] $end
    $var wire  8 <' d_rlen [7:0] $end
    $var wire  1 . d_rready [0:0] $end
    $var wire  3 p d_rsize [2:0] $end
    $var wire  1 ~ d_rvalid [0:0] $end
    $var wire 32 9' d_waddr [31:0] $end
    $var wire 32 ?' d_wdata [31:0] $end
    $var wire  1 "! d_wlast [0:0] $end
    $var wire  8 <' d_wlen [7:0] $end
    $var wire  1 0 d_wready [0:0] $end
    $var wire  3 O' d_wsize [2:0] $end
    $var wire  4 @' d_wstrb [3:0] $end
    $var wire  1 !! d_wvalid [0:0] $end
    $var wire  1 {! data_from_mem $end
    $var wire  1 +! dcache_miss [0:0] $end
    $var wire  1 %" dirty_clean_all $end
    $var wire  1 "" dirty_info $end
    $var wire  1 #" dirty_refill $end
    $var wire 16 &" dirty_table[0] [15:0] $end
    $var wire 16 '" dirty_table[1] [15:0] $end
    $var wire  1 $" dirty_we $end
    $var wire  1 H! fence_valid [0:0] $end
    $var wire  1 N! fence_valid_pipe [0:0] $end
    $var wire  1 G! fencei_valid [0:0] $end
    $var wire  2 o! hit [1:0] $end
    $var wire  1 q! hit_way $end
    $var wire 16 !" lru [15:0] $end
    $var wire  1 }! lru_hit_update $end
    $var wire  1 ~! lru_refill_update $end
    $var wire  1 |! lru_sel $end
    $var wire 32 -" maddr_buf [31:0] $end
    $var wire  1 ." mbuf_we $end
    $var wire 128 [! mem_rdata[0] [127:0] $end
    $var wire 128 _! mem_rdata[1] [127:0] $end
    $var wire 128 c! mem_wdata [127:0] $end
    $var wire 16 Y! mem_we[0] [15:0] $end
    $var wire 16 Z! mem_we[1] [15:0] $end
    $var wire  2 3 next_state [1:0] $end
    $var wire  4 W! r_index [3:0] $end
    $var wire 32 ^ rdata [31:0] $end
    $var wire 128 8" rdata_mem [127:0] $end
    $var wire 128 <" rdata_ret [127:0] $end
    $var wire  1 7" read_from_cnt $end
    $var wire  1 I! req_buf_we [0:0] $end
    $var wire 128 S! ret_buf [127:0] $end
    $var wire  3 E! rsize [2:0] $end
    $var wire  3 M! rsize_pipe [2:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 F! rvalid [0:0] $end
    $var wire  1 Q! rvalid_pipe [0:0] $end
    $var wire  2 @" state [1:0] $end
    $var wire 24 h! tag [23:0] $end
    $var wire 24 i! tag_rdata[0] [23:0] $end
    $var wire 24 j! tag_rdata[1] [23:0] $end
    $var wire  2 g! tagv_we [1:0] $end
    $var wire  1 6" uncached $end
    $var wire 16 k! valid_bit_mem[0] [15:0] $end
    $var wire 16 l! valid_bit_mem[1] [15:0] $end
    $var wire  1 m! valid_bit_rdata[0] [0:0] $end
    $var wire  1 n! valid_bit_rdata[1] [0:0] $end
    $var wire  1 O! valid_flush [0:0] $end
    $var wire  4 X! w_index [3:0] $end
    $var wire 24 h! w_tag [23:0] $end
    $var wire 128 (" wbuf [127:0] $end
    $var wire  1 ," wbuf_we $end
    $var wire 32 [ wdata [31:0] $end
    $var wire  1 z! wdata_from_pipe $end
    $var wire 32 J! wdata_pipe [31:0] $end
    $var wire 128 r! wdata_pipe_512 [127:0] $end
    $var wire  1 P! we_pipe [0:0] $end
    $var wire  1 /" wfsm_en $end
    $var wire  2 4 wfsm_next_state [1:0] $end
    $var wire  1 0" wfsm_reset $end
    $var wire  2 A" wfsm_state [1:0] $end
    $var wire  3 2" write_counter [2:0] $end
    $var wire  1 2 write_counter_en $end
    $var wire  1 3" write_counter_reset $end
    $var wire  3 B" write_num [2:0] $end
    $var wire  1 1" wrt_finish $end
    $var wire  4 o wstrb [3:0] $end
    $var wire  4 L! wstrb_pipe [3:0] $end
    $var wire 128 v! wstrb_pipe_512 [127:0] $end
    $var wire  1 D! wvalid [0:0] $end
    $var wire  1 R! wvalid_pipe [0:0] $end
    $scope module data_mem0 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 U' DATA_WIDTH [31:0] $end
     $var wire  4 H" addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 128 c! din [127:0] $end
     $var wire 128 D" dout [127:0] $end
     $var wire 32 # j [31:0] $end
     $var wire  4 W! raddr [3:0] $end
     $var wire 128 I" ram[0] [127:0] $end
     $var wire 128 q" ram[10] [127:0] $end
     $var wire 128 u" ram[11] [127:0] $end
     $var wire 128 y" ram[12] [127:0] $end
     $var wire 128 }" ram[13] [127:0] $end
     $var wire 128 ## ram[14] [127:0] $end
     $var wire 128 '# ram[15] [127:0] $end
     $var wire 128 M" ram[1] [127:0] $end
     $var wire 128 Q" ram[2] [127:0] $end
     $var wire 128 U" ram[3] [127:0] $end
     $var wire 128 Y" ram[4] [127:0] $end
     $var wire 128 ]" ram[5] [127:0] $end
     $var wire 128 a" ram[6] [127:0] $end
     $var wire 128 e" ram[7] [127:0] $end
     $var wire 128 i" ram[8] [127:0] $end
     $var wire 128 m" ram[9] [127:0] $end
     $var wire  4 X! waddr [3:0] $end
     $var wire 16 C" we [15:0] $end
    $upscope $end
    $scope module data_mem1 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 U' DATA_WIDTH [31:0] $end
     $var wire  4 0# addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 128 c! din [127:0] $end
     $var wire 128 ,# dout [127:0] $end
     $var wire 32 $ j [31:0] $end
     $var wire  4 W! raddr [3:0] $end
     $var wire 128 1# ram[0] [127:0] $end
     $var wire 128 Y# ram[10] [127:0] $end
     $var wire 128 ]# ram[11] [127:0] $end
     $var wire 128 a# ram[12] [127:0] $end
     $var wire 128 e# ram[13] [127:0] $end
     $var wire 128 i# ram[14] [127:0] $end
     $var wire 128 m# ram[15] [127:0] $end
     $var wire 128 5# ram[1] [127:0] $end
     $var wire 128 9# ram[2] [127:0] $end
     $var wire 128 =# ram[3] [127:0] $end
     $var wire 128 A# ram[4] [127:0] $end
     $var wire 128 E# ram[5] [127:0] $end
     $var wire 128 I# ram[6] [127:0] $end
     $var wire 128 M# ram[7] [127:0] $end
     $var wire 128 Q# ram[8] [127:0] $end
     $var wire 128 U# ram[9] [127:0] $end
     $var wire  4 X! waddr [3:0] $end
     $var wire 16 +# we [15:0] $end
    $upscope $end
    $scope module tag_mem0 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 S' DATA_WIDTH [31:0] $end
     $var wire  4 s# addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 24 h! din [23:0] $end
     $var wire 24 r# dout [23:0] $end
     $var wire 32 % i [31:0] $end
     $var wire  4 W! raddr [3:0] $end
     $var wire 24 t# ram[0] [23:0] $end
     $var wire 24 ~# ram[10] [23:0] $end
     $var wire 24 !$ ram[11] [23:0] $end
     $var wire 24 "$ ram[12] [23:0] $end
     $var wire 24 #$ ram[13] [23:0] $end
     $var wire 24 $$ ram[14] [23:0] $end
     $var wire 24 %$ ram[15] [23:0] $end
     $var wire 24 u# ram[1] [23:0] $end
     $var wire 24 v# ram[2] [23:0] $end
     $var wire 24 w# ram[3] [23:0] $end
     $var wire 24 x# ram[4] [23:0] $end
     $var wire 24 y# ram[5] [23:0] $end
     $var wire 24 z# ram[6] [23:0] $end
     $var wire 24 {# ram[7] [23:0] $end
     $var wire 24 |# ram[8] [23:0] $end
     $var wire 24 }# ram[9] [23:0] $end
     $var wire  4 X! waddr [3:0] $end
     $var wire  1 q# we $end
    $upscope $end
    $scope module tag_mem1 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 S' DATA_WIDTH [31:0] $end
     $var wire  4 ($ addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 24 h! din [23:0] $end
     $var wire 24 '$ dout [23:0] $end
     $var wire 32 & i [31:0] $end
     $var wire  4 W! raddr [3:0] $end
     $var wire 24 )$ ram[0] [23:0] $end
     $var wire 24 3$ ram[10] [23:0] $end
     $var wire 24 4$ ram[11] [23:0] $end
     $var wire 24 5$ ram[12] [23:0] $end
     $var wire 24 6$ ram[13] [23:0] $end
     $var wire 24 7$ ram[14] [23:0] $end
     $var wire 24 8$ ram[15] [23:0] $end
     $var wire 24 *$ ram[1] [23:0] $end
     $var wire 24 +$ ram[2] [23:0] $end
     $var wire 24 ,$ ram[3] [23:0] $end
     $var wire 24 -$ ram[4] [23:0] $end
     $var wire 24 .$ ram[5] [23:0] $end
     $var wire 24 /$ ram[6] [23:0] $end
     $var wire 24 0$ ram[7] [23:0] $end
     $var wire 24 1$ ram[8] [23:0] $end
     $var wire 24 2$ ram[9] [23:0] $end
     $var wire  4 X! waddr [3:0] $end
     $var wire  1 &$ we $end
    $upscope $end
   $upscope $end
   $scope module Decode_inst $end
    $var wire  5 d alu_op [4:0] $end
    $var wire  2 q alu_rs1_sel [1:0] $end
    $var wire  2 s alu_rs2_sel [1:0] $end
    $var wire  5 i br_type [4:0] $end
    $var wire  3 :$ funct3 [2:0] $end
    $var wire 32 E imm [31:0] $end
    $var wire 32 ? inst [31:0] $end
    $var wire  5 f mem_access [4:0] $end
    $var wire  5 k priv_vec [4:0] $end
    $var wire  5 9$ rd [4:0] $end
    $var wire  1 y rf_we [0:0] $end
    $var wire  1 u wb_rf_sel [0:0] $end
   $upscope $end
   $scope module Exp_Commit_inst $end
    $var wire 32 c exp_code [31:0] $end
    $var wire  5 n priv_vec [4:0] $end
   $upscope $end
   $scope module Hazard_inst $end
    $var wire  1 -! EX_LS_flush [0:0] $end
    $var wire  1 +! EX_LS_stall [0:0] $end
    $var wire  1 ,! ID_EX_flush [0:0] $end
    $var wire  1 +! ID_EX_stall [0:0] $end
    $var wire  1 '! IF1_IF2_flush [0:0] $end
    $var wire  1 (! IF1_IF2_stall [0:0] $end
    $var wire  1 *! IF2_ID_flush [0:0] $end
    $var wire  1 )! IF2_ID_stall [0:0] $end
    $var wire  1 -! LS_WB_flush [0:0] $end
    $var wire  1 +! LS_WB_stall [0:0] $end
    $var wire  1 +! dcache_miss [0:0] $end
    $var wire  1 -! flush_by_exp $end
    $var wire  1 .! flush_by_icache $end
    $var wire  1 &! flush_by_jump $end
    $var wire  1 C$ flush_by_load_use $end
    $var wire  1 D$ flush_by_priv_ex $end
    $var wire 32 Q forward1_data [31:0] $end
    $var wire  1 $! forward1_en [0:0] $end
    $var wire 32 R forward2_data [31:0] $end
    $var wire  1 %! forward2_en [0:0] $end
    $var wire  1 '! icache_flush [0:0] $end
    $var wire  1 .! icache_miss [0:0] $end
    $var wire  1 )! icache_stall [0:0] $end
    $var wire  1 F! is_load_ex $end
    $var wire  1 &! jump [0:0] $end
    $var wire 32 Z jump_target [31:0] $end
    $var wire 32 c mcause_global [31:0] $end
    $var wire  5 g mem_access_ex [4:0] $end
    $var wire 32 a mepc_global [31:0] $end
    $var wire 32 b mtvec_global [31:0] $end
    $var wire 32 ; pc_ex [31:0] $end
    $var wire  1 '! pc_set [0:0] $end
    $var wire 32 C pc_set_target [31:0] $end
    $var wire  1 (! pc_stall [0:0] $end
    $var wire 32 = pc_wb [31:0] $end
    $var wire  5 l priv_vec_ex [4:0] $end
    $var wire  5 n priv_vec_wb [4:0] $end
    $var wire  5 ?$ rf_rd_ex [4:0] $end
    $var wire  5 ;$ rf_rd_ls [4:0] $end
    $var wire  5 <$ rf_rd_wb [4:0] $end
    $var wire  5 =$ rf_rs1_ex [4:0] $end
    $var wire  5 @$ rf_rs1_id [4:0] $end
    $var wire  5 >$ rf_rs2_ex [4:0] $end
    $var wire  5 A$ rf_rs2_id [4:0] $end
    $var wire 32 X rf_wdata_tmp_ls [31:0] $end
    $var wire 32 G rf_wdata_wb [31:0] $end
    $var wire  1 { rf_we_ls [0:0] $end
    $var wire  1 | rf_we_wb [0:0] $end
    $var wire  1 +! stall_by_dcache $end
    $var wire  1 .! stall_by_icache $end
    $var wire  1 B$ stall_by_load_use $end
   $upscope $end
   $scope module ICache_inst $end
    $var wire 32 U' BIT_NUM [31:0] $end
    $var wire 32 T' BYTE_NUM [31:0] $end
    $var wire 32 L' BYTE_OFFSET_WIDTH [31:0] $end
    $var wire 32 L' INDEX_WIDTH [31:0] $end
    $var wire 32 T' SET_NUM [31:0] $end
    $var wire 32 S' TAG_WIDTH [31:0] $end
    $var wire 32 L' WORD_NUM [31:0] $end
    $var wire 32 M' WORD_OFFSET_WIDTH [31:0] $end
    $var wire 32 E$ addr_pipe [31:0] $end
    $var wire  1 _$ cache_hit $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 c$ data_from_mem $end
    $var wire  1 H! fence_valid [0:0] $end
    $var wire  1 G! fencei_valid [0:0] $end
    $var wire  1 '! flush [0:0] $end
    $var wire  1 d$ flush_buf $end
    $var wire  2 ]$ hit [1:0] $end
    $var wire  1 ^$ hit_way $end
    $var wire 32 _ i_raddr [31:0] $end
    $var wire 32 4' i_rdata [31:0] $end
    $var wire  1 - i_rlast [0:0] $end
    $var wire  8 N' i_rlen [7:0] $end
    $var wire  1 , i_rready [0:0] $end
    $var wire  3 O' i_rsize [2:0] $end
    $var wire  1 } i_rvalid [0:0] $end
    $var wire  1 .! icache_miss [0:0] $end
    $var wire 16 m$ lru [15:0] $end
    $var wire  1 a$ lru_hit_update $end
    $var wire  1 b$ lru_refill_update $end
    $var wire  1 `$ lru_sel $end
    $var wire 128 O$ mem_rdata[0] [127:0] $end
    $var wire 128 S$ mem_rdata[1] [127:0] $end
    $var wire  2 N$ mem_we [1:0] $end
    $var wire  2 5 next_state [1:0] $end
    $var wire  4 L$ r_index [3:0] $end
    $var wire 32 8 raddr [31:0] $end
    $var wire 32 > rdata [31:0] $end
    $var wire 128 e$ rdata_mem [127:0] $end
    $var wire 128 i$ rdata_ret [127:0] $end
    $var wire  1 G$ req_buf_we $end
    $var wire 128 H$ ret_buf [127:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 -' rvalid [0:0] $end
    $var wire  1 F$ rvalid_pipe $end
    $var wire  1 )! stall [0:0] $end
    $var wire  2 n$ state [1:0] $end
    $var wire 24 X$ tag [23:0] $end
    $var wire 25 Y$ tag_rdata[0] [24:0] $end
    $var wire 25 Z$ tag_rdata[1] [24:0] $end
    $var wire  2 W$ tagv_we [1:0] $end
    $var wire 16 [$ valid_bit_mem[0] [15:0] $end
    $var wire 16 \$ valid_bit_mem[1] [15:0] $end
    $var wire  4 M$ w_index [3:0] $end
    $var wire 24 X$ w_tag [23:0] $end
    $scope module data_mem0 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 U' DATA_WIDTH [31:0] $end
     $var wire  4 t$ addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 128 H$ din [127:0] $end
     $var wire 128 p$ dout [127:0] $end
     $var wire 32 ' i [31:0] $end
     $var wire  4 L$ raddr [3:0] $end
     $var wire 128 u$ ram[0] [127:0] $end
     $var wire 128 ?% ram[10] [127:0] $end
     $var wire 128 C% ram[11] [127:0] $end
     $var wire 128 G% ram[12] [127:0] $end
     $var wire 128 K% ram[13] [127:0] $end
     $var wire 128 O% ram[14] [127:0] $end
     $var wire 128 S% ram[15] [127:0] $end
     $var wire 128 y$ ram[1] [127:0] $end
     $var wire 128 }$ ram[2] [127:0] $end
     $var wire 128 #% ram[3] [127:0] $end
     $var wire 128 '% ram[4] [127:0] $end
     $var wire 128 +% ram[5] [127:0] $end
     $var wire 128 /% ram[6] [127:0] $end
     $var wire 128 3% ram[7] [127:0] $end
     $var wire 128 7% ram[8] [127:0] $end
     $var wire 128 ;% ram[9] [127:0] $end
     $var wire  4 M$ waddr [3:0] $end
     $var wire  1 o$ we $end
    $upscope $end
    $scope module data_mem1 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 U' DATA_WIDTH [31:0] $end
     $var wire  4 \% addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 128 H$ din [127:0] $end
     $var wire 128 X% dout [127:0] $end
     $var wire 32 ( i [31:0] $end
     $var wire  4 L$ raddr [3:0] $end
     $var wire 128 ]% ram[0] [127:0] $end
     $var wire 128 '& ram[10] [127:0] $end
     $var wire 128 +& ram[11] [127:0] $end
     $var wire 128 /& ram[12] [127:0] $end
     $var wire 128 3& ram[13] [127:0] $end
     $var wire 128 7& ram[14] [127:0] $end
     $var wire 128 ;& ram[15] [127:0] $end
     $var wire 128 a% ram[1] [127:0] $end
     $var wire 128 e% ram[2] [127:0] $end
     $var wire 128 i% ram[3] [127:0] $end
     $var wire 128 m% ram[4] [127:0] $end
     $var wire 128 q% ram[5] [127:0] $end
     $var wire 128 u% ram[6] [127:0] $end
     $var wire 128 y% ram[7] [127:0] $end
     $var wire 128 }% ram[8] [127:0] $end
     $var wire 128 #& ram[9] [127:0] $end
     $var wire  4 M$ waddr [3:0] $end
     $var wire  1 W% we $end
    $upscope $end
    $scope module tag_mem0 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 S' DATA_WIDTH [31:0] $end
     $var wire  4 A& addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 24 X$ din [23:0] $end
     $var wire 24 @& dout [23:0] $end
     $var wire 32 ) i [31:0] $end
     $var wire  4 L$ raddr [3:0] $end
     $var wire 24 B& ram[0] [23:0] $end
     $var wire 24 L& ram[10] [23:0] $end
     $var wire 24 M& ram[11] [23:0] $end
     $var wire 24 N& ram[12] [23:0] $end
     $var wire 24 O& ram[13] [23:0] $end
     $var wire 24 P& ram[14] [23:0] $end
     $var wire 24 Q& ram[15] [23:0] $end
     $var wire 24 C& ram[1] [23:0] $end
     $var wire 24 D& ram[2] [23:0] $end
     $var wire 24 E& ram[3] [23:0] $end
     $var wire 24 F& ram[4] [23:0] $end
     $var wire 24 G& ram[5] [23:0] $end
     $var wire 24 H& ram[6] [23:0] $end
     $var wire 24 I& ram[7] [23:0] $end
     $var wire 24 J& ram[8] [23:0] $end
     $var wire 24 K& ram[9] [23:0] $end
     $var wire  4 M$ waddr [3:0] $end
     $var wire  1 ?& we $end
    $upscope $end
    $scope module tag_mem1 $end
     $var wire 32 L' ADDR_WIDTH [31:0] $end
     $var wire 32 S' DATA_WIDTH [31:0] $end
     $var wire  4 T& addr_r [3:0] $end
     $var wire  1 ,' clk $end
     $var wire 24 X$ din [23:0] $end
     $var wire 24 S& dout [23:0] $end
     $var wire 32 * i [31:0] $end
     $var wire  4 L$ raddr [3:0] $end
     $var wire 24 U& ram[0] [23:0] $end
     $var wire 24 _& ram[10] [23:0] $end
     $var wire 24 `& ram[11] [23:0] $end
     $var wire 24 a& ram[12] [23:0] $end
     $var wire 24 b& ram[13] [23:0] $end
     $var wire 24 c& ram[14] [23:0] $end
     $var wire 24 d& ram[15] [23:0] $end
     $var wire 24 V& ram[1] [23:0] $end
     $var wire 24 W& ram[2] [23:0] $end
     $var wire 24 X& ram[3] [23:0] $end
     $var wire 24 Y& ram[4] [23:0] $end
     $var wire 24 Z& ram[5] [23:0] $end
     $var wire 24 [& ram[6] [23:0] $end
     $var wire 24 \& ram[7] [23:0] $end
     $var wire 24 ]& ram[8] [23:0] $end
     $var wire 24 ^& ram[9] [23:0] $end
     $var wire  4 M$ waddr [3:0] $end
     $var wire  1 R& we $end
    $upscope $end
   $upscope $end
   $scope module NPC_Mux_inst $end
    $var wire 32 D next_pc [31:0] $end
    $var wire 32 8 pc [31:0] $end
    $var wire  1 '! pc_set [0:0] $end
    $var wire 32 C pc_target [31:0] $end
   $upscope $end
   $scope module PC_inst $end
    $var wire 32 K' RESET_VALUE [31:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire 32 D next_pc [31:0] $end
    $var wire 32 8 pc [31:0] $end
    $var wire 32 8 pc_reg [31:0] $end
    $var wire  1 '! pc_set [0:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 (! stall [0:0] $end
   $upscope $end
   $scope module Priv_inst $end
    $var wire  3 W' CSRRC [2:0] $end
    $var wire  3 Z' CSRRCI [2:0] $end
    $var wire  3 O' CSRRS [2:0] $end
    $var wire  3 Y' CSRRSI [2:0] $end
    $var wire  3 V' CSRRW [2:0] $end
    $var wire  3 X' CSRRWI [2:0] $end
    $var wire  3 e& csr_op [2:0] $end
    $var wire 32 I csr_rdata [31:0] $end
    $var wire 32 J csr_wdata [31:0] $end
    $var wire 32 S rf_rdata1 [31:0] $end
    $var wire 32 f& zimm [31:0] $end
   $upscope $end
   $scope module Regfile_inst $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  5 @$ raddr1 [4:0] $end
    $var wire  5 A$ raddr2 [4:0] $end
    $var wire 32 M rdata1 [31:0] $end
    $var wire 32 O rdata2 [31:0] $end
    $var wire 32 g& rf[0] [31:0] $end
    $var wire 32 q& rf[10] [31:0] $end
    $var wire 32 r& rf[11] [31:0] $end
    $var wire 32 s& rf[12] [31:0] $end
    $var wire 32 t& rf[13] [31:0] $end
    $var wire 32 u& rf[14] [31:0] $end
    $var wire 32 v& rf[15] [31:0] $end
    $var wire 32 w& rf[16] [31:0] $end
    $var wire 32 x& rf[17] [31:0] $end
    $var wire 32 y& rf[18] [31:0] $end
    $var wire 32 z& rf[19] [31:0] $end
    $var wire 32 h& rf[1] [31:0] $end
    $var wire 32 {& rf[20] [31:0] $end
    $var wire 32 |& rf[21] [31:0] $end
    $var wire 32 }& rf[22] [31:0] $end
    $var wire 32 ~& rf[23] [31:0] $end
    $var wire 32 !' rf[24] [31:0] $end
    $var wire 32 "' rf[25] [31:0] $end
    $var wire 32 #' rf[26] [31:0] $end
    $var wire 32 $' rf[27] [31:0] $end
    $var wire 32 %' rf[28] [31:0] $end
    $var wire 32 &' rf[29] [31:0] $end
    $var wire 32 i& rf[2] [31:0] $end
    $var wire 32 '' rf[30] [31:0] $end
    $var wire 32 (' rf[31] [31:0] $end
    $var wire 32 j& rf[3] [31:0] $end
    $var wire 32 k& rf[4] [31:0] $end
    $var wire 32 l& rf[5] [31:0] $end
    $var wire 32 m& rf[6] [31:0] $end
    $var wire 32 n& rf[7] [31:0] $end
    $var wire 32 o& rf[8] [31:0] $end
    $var wire 32 p& rf[9] [31:0] $end
    $var wire  5 <$ waddr [4:0] $end
    $var wire 32 G wdata [31:0] $end
    $var wire  1 | we $end
    $scope module unnamedblk1 $end
     $var wire 32 + i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module SegReg_EX_LS_inst $end
    $var wire 32 K' PC_RESET_VAL [31:0] $end
    $var wire 32 W alu_result_ex [31:0] $end
    $var wire 32 X alu_result_ls [31:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 1! commit_ex [0:0] $end
    $var wire  1 2! commit_ls [0:0] $end
    $var wire 32 J csr_wdata_ex [31:0] $end
    $var wire 32 K csr_wdata_ls [31:0] $end
    $var wire  1 -! flush [0:0] $end
    $var wire 32 @ inst_ex [31:0] $end
    $var wire 32 A inst_ls [31:0] $end
    $var wire  5 g mem_access_ex [4:0] $end
    $var wire  5 h mem_access_ls [4:0] $end
    $var wire 32 ; pc_ex [31:0] $end
    $var wire 32 < pc_ls [31:0] $end
    $var wire  5 l priv_vec_ex [4:0] $end
    $var wire  5 m priv_vec_ls [4:0] $end
    $var wire  1 z rf_we_ex [0:0] $end
    $var wire  1 { rf_we_ls [0:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 +! stall [0:0] $end
    $var wire  1 v wb_rf_sel_ex [0:0] $end
    $var wire  1 w wb_rf_sel_ls [0:0] $end
   $upscope $end
   $scope module SegReg_ID_EX_inst $end
    $var wire 32 K' PC_RESET_VAL [31:0] $end
    $var wire  2 r alu_rs1_sel_ex [1:0] $end
    $var wire  2 q alu_rs1_sel_id [1:0] $end
    $var wire  2 t alu_rs2_sel_ex [1:0] $end
    $var wire  2 s alu_rs2_sel_id [1:0] $end
    $var wire  5 j br_type_ex [4:0] $end
    $var wire  5 i br_type_id [4:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 1! commit_ex [0:0] $end
    $var wire  1 0! commit_id [0:0] $end
    $var wire 32 I csr_rdata_ex [31:0] $end
    $var wire 32 H csr_rdata_id [31:0] $end
    $var wire  1 ,! flush [0:0] $end
    $var wire 32 F imm_ex [31:0] $end
    $var wire 32 E imm_id [31:0] $end
    $var wire 32 @ inst_ex [31:0] $end
    $var wire 32 ? inst_id [31:0] $end
    $var wire  5 g mem_access_ex [4:0] $end
    $var wire  5 f mem_access_id [4:0] $end
    $var wire  5 e op_ex [4:0] $end
    $var wire  5 d op_id [4:0] $end
    $var wire 32 ; pc_ex [31:0] $end
    $var wire 32 : pc_id [31:0] $end
    $var wire  5 l priv_vec_ex [4:0] $end
    $var wire  5 k priv_vec_id [4:0] $end
    $var wire 32 N rdata1_ex [31:0] $end
    $var wire 32 M rdata1_id [31:0] $end
    $var wire 32 P rdata2_ex [31:0] $end
    $var wire 32 O rdata2_id [31:0] $end
    $var wire  1 z rf_we_ex [0:0] $end
    $var wire  1 y rf_we_id [0:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 +! stall [0:0] $end
    $var wire  1 v wb_rf_sel_ex [0:0] $end
    $var wire  1 u wb_rf_sel_id [0:0] $end
   $upscope $end
   $scope module SegReg_IF1_IF2_inst $end
    $var wire 32 K' PC_RESET_VAL [31:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 -' commit_if1 [0:0] $end
    $var wire  1 /! commit_if2 [0:0] $end
    $var wire  1 '! flush [0:0] $end
    $var wire 32 8 pc_if1 [31:0] $end
    $var wire 32 9 pc_if2 [31:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 (! stall [0:0] $end
   $upscope $end
   $scope module SegReg_IF2_ID_inst $end
    $var wire 32 K' PC_RESET_VAL [31:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 0! commit_id [0:0] $end
    $var wire  1 /! commit_if2 [0:0] $end
    $var wire  1 *! flush [0:0] $end
    $var wire 32 ? inst_id [31:0] $end
    $var wire 32 > inst_if2 [31:0] $end
    $var wire 32 : pc_id [31:0] $end
    $var wire 32 9 pc_if2 [31:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 )! stall [0:0] $end
   $upscope $end
   $scope module SegReg_LS_WB_inst $end
    $var wire 32 K' PC_RESET_VAL [31:0] $end
    $var wire 32 X alu_result_ls [31:0] $end
    $var wire 32 Y alu_result_wb [31:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 2! commit_ls [0:0] $end
    $var wire  1 G' commit_wb [0:0] $end
    $var wire 32 K csr_wdata_ls [31:0] $end
    $var wire 32 L csr_wdata_wb [31:0] $end
    $var wire  1 -! flush [0:0] $end
    $var wire 32 A inst_ls [31:0] $end
    $var wire 32 B inst_wb [31:0] $end
    $var wire 32 \ mem_rdata_ls [31:0] $end
    $var wire 32 ] mem_rdata_wb [31:0] $end
    $var wire 32 < pc_ls [31:0] $end
    $var wire 32 = pc_wb [31:0] $end
    $var wire  5 m priv_vec_ls [4:0] $end
    $var wire  5 n priv_vec_wb [4:0] $end
    $var wire  1 )' read_ls [0:0] $end
    $var wire  1 { rf_we_ls [0:0] $end
    $var wire  1 | rf_we_wb [0:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 +! stall [0:0] $end
    $var wire  1 H' uncache_read_wb [0:0] $end
    $var wire  1 w wb_rf_sel_ls [0:0] $end
    $var wire  1 x wb_rf_sel_wb [0:0] $end
   $upscope $end
   $scope module WB_rf_wdata_mux $end
    $var wire 32 P' WIDTH [31:0] $end
    $var wire 32 Y din1 [31:0] $end
    $var wire 32 ] din2 [31:0] $end
    $var wire 32 G dout [31:0] $end
    $var wire  1 x sel [0:0] $end
   $upscope $end
   $scope module axi_arbiter_inst $end
    $var wire 32 .' araddr [31:0] $end
    $var wire  2 3' arburst [1:0] $end
    $var wire  8 1' arlen [7:0] $end
    $var wire  1 0' arready [0:0] $end
    $var wire  3 2' arsize [2:0] $end
    $var wire  1 /' arvalid [0:0] $end
    $var wire 32 9' awaddr [31:0] $end
    $var wire  2 >' awburst [1:0] $end
    $var wire  8 <' awlen [7:0] $end
    $var wire  1 ;' awready [0:0] $end
    $var wire  3 =' awsize [2:0] $end
    $var wire  1 :' awvalid [0:0] $end
    $var wire  1 F' bready [0:0] $end
    $var wire  2 D' bresp [1:0] $end
    $var wire  1 E' bvalid [0:0] $end
    $var wire  1 ,' clk [0:0] $end
    $var wire  1 #! d_bready [0:0] $end
    $var wire  1 1 d_bvalid [0:0] $end
    $var wire 32 ` d_raddr [31:0] $end
    $var wire 32 4' d_rdata [31:0] $end
    $var wire  1 / d_rlast [0:0] $end
    $var wire  8 <' d_rlen [7:0] $end
    $var wire  1 . d_rready [0:0] $end
    $var wire  3 p d_rsize [2:0] $end
    $var wire  1 ~ d_rvalid [0:0] $end
    $var wire 32 9' d_waddr [31:0] $end
    $var wire 32 ?' d_wdata [31:0] $end
    $var wire  1 "! d_wlast [0:0] $end
    $var wire  8 <' d_wlen [7:0] $end
    $var wire  1 0 d_wready [0:0] $end
    $var wire  3 O' d_wsize [2:0] $end
    $var wire  4 @' d_wstrb [3:0] $end
    $var wire  1 !! d_wvalid [0:0] $end
    $var wire 32 _ i_raddr [31:0] $end
    $var wire 32 4' i_rdata [31:0] $end
    $var wire  1 - i_rlast [0:0] $end
    $var wire  8 N' i_rlen [7:0] $end
    $var wire  1 , i_rready [0:0] $end
    $var wire  3 O' i_rsize [2:0] $end
    $var wire  1 } i_rvalid [0:0] $end
    $var wire  3 *' r_crt [2:0] $end
    $var wire  3 6 r_nxt [2:0] $end
    $var wire 32 4' rdata [31:0] $end
    $var wire  1 8' rlast [0:0] $end
    $var wire  1 7' rready [0:0] $end
    $var wire  2 5' rresp [1:0] $end
    $var wire  1 -' rstn [0:0] $end
    $var wire  1 6' rvalid [0:0] $end
    $var wire  2 +' w_crt [1:0] $end
    $var wire  2 7 w_nxt [1:0] $end
    $var wire 32 ?' wdata [31:0] $end
    $var wire  1 C' wlast [0:0] $end
    $var wire  1 B' wready [0:0] $end
    $var wire  4 @' wstrb [3:0] $end
    $var wire  1 A' wvalid [0:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


