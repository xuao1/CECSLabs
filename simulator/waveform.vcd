$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 <! clk [0:0] $end
  $var wire  1 >! commit_wb [0:0] $end
  $var wire 32 @! inst [31:0] $end
  $var wire 32 ?! pc_cur [31:0] $end
  $var wire  1 =! rstn [0:0] $end
  $var wire  1 A! uncache_read_wb [0:0] $end
  $scope module CPU $end
   $var wire 32 C! D_CACHE_DEPTH [31:0] $end
   $var wire  1 F! EX_LS_flush [0:0] $end
   $var wire  1 F! EX_LS_stall [0:0] $end
   $var wire  1 \ ID_EX_flush [0:0] $end
   $var wire  1 F! ID_EX_stall [0:0] $end
   $var wire  1 Z IF1_IF2_flush [0:0] $end
   $var wire  1 [ IF1_IF2_stall [0:0] $end
   $var wire  1 Z IF2_ID_flush [0:0] $end
   $var wire  1 [ IF2_ID_stall [0:0] $end
   $var wire 32 C! I_CACHE_DEPTH [31:0] $end
   $var wire  1 F! LS_WB_flush [0:0] $end
   $var wire  1 F! LS_WB_stall [0:0] $end
   $var wire 32 B! PC_RESET_VALUE [31:0] $end
   $var wire  5 F alu_op_ex [4:0] $end
   $var wire  5 E alu_op_id [4:0] $end
   $var wire 32 > alu_result_ex [31:0] $end
   $var wire 32 ? alu_result_ls [31:0] $end
   $var wire 32 @ alu_result_wb [31:0] $end
   $var wire 32 : alu_rf_data1 [31:0] $end
   $var wire 32 ; alu_rf_data2 [31:0] $end
   $var wire 32 < alu_rs1 [31:0] $end
   $var wire  2 M alu_rs1_sel_ex [1:0] $end
   $var wire  2 L alu_rs1_sel_id [1:0] $end
   $var wire 32 = alu_rs2 [31:0] $end
   $var wire  2 O alu_rs2_sel_ex [1:0] $end
   $var wire  2 N alu_rs2_sel_id [1:0] $end
   $var wire  5 K br_type_ex [4:0] $end
   $var wire  5 J br_type_id [4:0] $end
   $var wire  1 <! clk [0:0] $end
   $var wire  1 _ commit_ex [0:0] $end
   $var wire  1 ^ commit_id [0:0] $end
   $var wire  1 =! commit_if1 [0:0] $end
   $var wire  1 ] commit_if2 [0:0] $end
   $var wire  1 ` commit_ls [0:0] $end
   $var wire  1 >! commit_wb [0:0] $end
   $var wire 32 D dcache_rdata_ls [31:0] $end
   $var wire 32 8 forward1_data [31:0] $end
   $var wire  1 X forward1_en [0:0] $end
   $var wire 32 9 forward2_data [31:0] $end
   $var wire  1 Y forward2_en [0:0] $end
   $var wire 32 2 imm_ex [31:0] $end
   $var wire 32 1 imm_id [31:0] $end
   $var wire 32 @! inst [31:0] $end
   $var wire 32 , inst_ex [31:0] $end
   $var wire 32 + inst_id [31:0] $end
   $var wire 32 * inst_if2 [31:0] $end
   $var wire 32 - inst_ls [31:0] $end
   $var wire 32 . inst_wb [31:0] $end
   $var wire  1 Z jump [0:0] $end
   $var wire 32 A jump_target [31:0] $end
   $var wire  5 H mem_access_ex [4:0] $end
   $var wire  5 G mem_access_id [4:0] $end
   $var wire  5 I mem_access_ls [4:0] $end
   $var wire 32 B mem_rdata_ls [31:0] $end
   $var wire 32 C mem_rdata_wb [31:0] $end
   $var wire 32 D! mem_wdata_ex [31:0] $end
   $var wire 32 0 next_pc [31:0] $end
   $var wire 32 ?! pc_cur [31:0] $end
   $var wire 32 ' pc_ex [31:0] $end
   $var wire 32 & pc_id [31:0] $end
   $var wire 32 $ pc_if1 [31:0] $end
   $var wire 32 % pc_if2 [31:0] $end
   $var wire 32 ( pc_ls [31:0] $end
   $var wire  1 Z pc_set [0:0] $end
   $var wire  1 [ pc_stall [0:0] $end
   $var wire 32 / pc_target [31:0] $end
   $var wire 32 ) pc_wb [31:0] $end
   $var wire 32 5 rf_rdata1_ex [31:0] $end
   $var wire 32 4 rf_rdata1_id [31:0] $end
   $var wire 32 7 rf_rdata2_ex [31:0] $end
   $var wire 32 6 rf_rdata2_id [31:0] $end
   $var wire 32 3 rf_wdata_wb [31:0] $end
   $var wire  1 U rf_we_ex [0:0] $end
   $var wire  1 T rf_we_id [0:0] $end
   $var wire  1 V rf_we_ls [0:0] $end
   $var wire  1 W rf_we_wb [0:0] $end
   $var wire  1 =! rstn [0:0] $end
   $var wire  1 A! uncache_read_wb [0:0] $end
   $var wire  1 Q wb_rf_sel_ex [0:0] $end
   $var wire  1 P wb_rf_sel_id [0:0] $end
   $var wire  1 R wb_rf_sel_ls [0:0] $end
   $var wire  1 S wb_rf_sel_wb [0:0] $end
   $var wire  4 E! wstrb_ex [3:0] $end
   $scope module ALU_inst $end
    $var wire  5 F alu_op [4:0] $end
    $var wire 32 > result [31:0] $end
    $var wire 64 a result_64 [63:0] $end
    $var wire 32 c result_div [31:0] $end
    $var wire 32 d result_rem [31:0] $end
    $var wire  2 e sign [1:0] $end
    $var wire 32 < sr1 [31:0] $end
    $var wire 32 f sr1_abs [31:0] $end
    $var wire 32 = sr2 [31:0] $end
    $var wire 32 g sr2_abs [31:0] $end
   $upscope $end
   $scope module ALU_rf_data1_mux $end
    $var wire 32 G! WIDTH [31:0] $end
    $var wire 32 5 din1 [31:0] $end
    $var wire 32 8 din2 [31:0] $end
    $var wire 32 : dout [31:0] $end
    $var wire  1 X sel [0:0] $end
   $upscope $end
   $scope module ALU_rf_data2_mux $end
    $var wire 32 G! WIDTH [31:0] $end
    $var wire 32 7 din1 [31:0] $end
    $var wire 32 9 din2 [31:0] $end
    $var wire 32 ; dout [31:0] $end
    $var wire  1 Y sel [0:0] $end
   $upscope $end
   $scope module ALU_rs1_mux $end
    $var wire 32 G! WIDTH [31:0] $end
    $var wire 32 : din1 [31:0] $end
    $var wire 32 ' din2 [31:0] $end
    $var wire 32 H! din3 [31:0] $end
    $var wire 32 H! din4 [31:0] $end
    $var wire 32 < dout [31:0] $end
    $var wire  2 M sel [1:0] $end
   $upscope $end
   $scope module ALU_rs2_mux $end
    $var wire 32 G! WIDTH [31:0] $end
    $var wire 32 ; din1 [31:0] $end
    $var wire 32 2 din2 [31:0] $end
    $var wire 32 I! din3 [31:0] $end
    $var wire 32 H! din4 [31:0] $end
    $var wire 32 = dout [31:0] $end
    $var wire  2 O sel [1:0] $end
   $upscope $end
   $scope module Branch_inst $end
    $var wire  5 K br_type [4:0] $end
    $var wire 32 2 imm [31:0] $end
    $var wire  1 h is_branch $end
    $var wire  1 i is_jal $end
    $var wire  1 j is_jalr $end
    $var wire  1 Z jump [0:0] $end
    $var wire 32 A jump_target [31:0] $end
    $var wire 32 ' pc [31:0] $end
    $var wire 32 : sr1 [31:0] $end
    $var wire 32 ; sr2 [31:0] $end
   $upscope $end
   $scope module DCache_Read_Ctrl_inst $end
    $var wire  1 k is_load $end
    $var wire 32 D load_data [31:0] $end
    $var wire  3 l load_type [2:0] $end
    $var wire  5 I mem_access [4:0] $end
    $var wire 32 ? mem_raddr [31:0] $end
    $var wire 32 D mem_rdata [31:0] $end
    $var wire 32 B rdata [31:0] $end
   $upscope $end
   $scope module DCache_inst $end
    $var wire 32 C! DEPTH [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 F! flush [0:0] $end
    $var wire  5 H mem_access [4:0] $end
    $var wire 32 > raddr [31:0] $end
    $var wire 32 D rdata [31:0] $end
    $var wire 32 m rdata_temp [31:0] $end
    $var wire  1 F! stall [0:0] $end
    $var wire 32 > waddr [31:0] $end
    $var wire 32 ; wdata [31:0] $end
   $upscope $end
   $scope module Decode_inst $end
    $var wire  5 E alu_op [4:0] $end
    $var wire  2 L alu_rs1_sel [1:0] $end
    $var wire  2 N alu_rs2_sel [1:0] $end
    $var wire  5 J br_type [4:0] $end
    $var wire  3 o funct3 [2:0] $end
    $var wire 32 1 imm [31:0] $end
    $var wire 32 + inst [31:0] $end
    $var wire  5 G mem_access [4:0] $end
    $var wire  5 n rd [4:0] $end
    $var wire  1 T rf_we [0:0] $end
    $var wire  1 P wb_rf_sel [0:0] $end
   $upscope $end
   $scope module Hazard_inst $end
    $var wire  1 F! EX_LS_flush [0:0] $end
    $var wire  1 F! EX_LS_stall [0:0] $end
    $var wire  1 \ ID_EX_flush [0:0] $end
    $var wire  1 F! ID_EX_stall [0:0] $end
    $var wire  1 Z IF1_IF2_flush [0:0] $end
    $var wire  1 [ IF1_IF2_stall [0:0] $end
    $var wire  1 Z IF2_ID_flush [0:0] $end
    $var wire  1 [ IF2_ID_stall [0:0] $end
    $var wire  1 F! LS_WB_flush [0:0] $end
    $var wire  1 F! LS_WB_stall [0:0] $end
    $var wire  1 Z flush_by_jump $end
    $var wire  1 w flush_by_load_use $end
    $var wire 32 8 forward1_data [31:0] $end
    $var wire  1 X forward1_en [0:0] $end
    $var wire 32 9 forward2_data [31:0] $end
    $var wire  1 Y forward2_en [0:0] $end
    $var wire  1 x is_load_ex $end
    $var wire  1 Z jump [0:0] $end
    $var wire 32 A jump_target [31:0] $end
    $var wire  5 H mem_access_ex [4:0] $end
    $var wire  1 Z pc_set [0:0] $end
    $var wire 32 / pc_set_target [31:0] $end
    $var wire  1 [ pc_stall [0:0] $end
    $var wire  5 t rf_rd_ex [4:0] $end
    $var wire  5 p rf_rd_ls [4:0] $end
    $var wire  5 q rf_rd_wb [4:0] $end
    $var wire  5 r rf_rs1_ex [4:0] $end
    $var wire  5 u rf_rs1_id [4:0] $end
    $var wire  5 s rf_rs2_ex [4:0] $end
    $var wire  5 v rf_rs2_id [4:0] $end
    $var wire 32 ? rf_wdata_tmp_ls [31:0] $end
    $var wire 32 3 rf_wdata_wb [31:0] $end
    $var wire  1 V rf_we_ls [0:0] $end
    $var wire  1 W rf_we_wb [0:0] $end
    $var wire  1 [ stall_by_load_use $end
   $upscope $end
   $scope module ICache_inst $end
    $var wire 32 C! DEPTH [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 Z flush [0:0] $end
    $var wire 32 $ raddr [31:0] $end
    $var wire 32 * rdata [31:0] $end
    $var wire 32 y rdata_temp [31:0] $end
    $var wire  1 [ stall [0:0] $end
   $upscope $end
   $scope module NPC_Mux_inst $end
    $var wire 32 0 next_pc [31:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire  1 Z pc_set [0:0] $end
    $var wire 32 / pc_target [31:0] $end
   $upscope $end
   $scope module PC_inst $end
    $var wire 32 B! RESET_VALUE [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire 32 0 next_pc [31:0] $end
    $var wire 32 $ pc [31:0] $end
    $var wire 32 $ pc_reg [31:0] $end
    $var wire  1 =! rstn [0:0] $end
    $var wire  1 [ stall [0:0] $end
   $upscope $end
   $scope module Regfile_inst $end
    $var wire  1 <! clk [0:0] $end
    $var wire  5 u raddr1 [4:0] $end
    $var wire  5 v raddr2 [4:0] $end
    $var wire 32 4 rdata1 [31:0] $end
    $var wire 32 6 rdata2 [31:0] $end
    $var wire 32 z rf[0] [31:0] $end
    $var wire 32 &! rf[10] [31:0] $end
    $var wire 32 '! rf[11] [31:0] $end
    $var wire 32 (! rf[12] [31:0] $end
    $var wire 32 )! rf[13] [31:0] $end
    $var wire 32 *! rf[14] [31:0] $end
    $var wire 32 +! rf[15] [31:0] $end
    $var wire 32 ,! rf[16] [31:0] $end
    $var wire 32 -! rf[17] [31:0] $end
    $var wire 32 .! rf[18] [31:0] $end
    $var wire 32 /! rf[19] [31:0] $end
    $var wire 32 { rf[1] [31:0] $end
    $var wire 32 0! rf[20] [31:0] $end
    $var wire 32 1! rf[21] [31:0] $end
    $var wire 32 2! rf[22] [31:0] $end
    $var wire 32 3! rf[23] [31:0] $end
    $var wire 32 4! rf[24] [31:0] $end
    $var wire 32 5! rf[25] [31:0] $end
    $var wire 32 6! rf[26] [31:0] $end
    $var wire 32 7! rf[27] [31:0] $end
    $var wire 32 8! rf[28] [31:0] $end
    $var wire 32 9! rf[29] [31:0] $end
    $var wire 32 | rf[2] [31:0] $end
    $var wire 32 :! rf[30] [31:0] $end
    $var wire 32 ;! rf[31] [31:0] $end
    $var wire 32 } rf[3] [31:0] $end
    $var wire 32 ~ rf[4] [31:0] $end
    $var wire 32 !! rf[5] [31:0] $end
    $var wire 32 "! rf[6] [31:0] $end
    $var wire 32 #! rf[7] [31:0] $end
    $var wire 32 $! rf[8] [31:0] $end
    $var wire 32 %! rf[9] [31:0] $end
    $var wire  5 q waddr [4:0] $end
    $var wire 32 3 wdata [31:0] $end
    $var wire  1 W we $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module SegReg_EX_LS_inst $end
    $var wire 32 B! PC_RESET_VAL [31:0] $end
    $var wire 32 > alu_result_ex [31:0] $end
    $var wire 32 ? alu_result_ls [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 _ commit_ex [0:0] $end
    $var wire  1 ` commit_ls [0:0] $end
    $var wire  1 F! flush [0:0] $end
    $var wire 32 , inst_ex [31:0] $end
    $var wire 32 - inst_ls [31:0] $end
    $var wire  5 H mem_access_ex [4:0] $end
    $var wire  5 I mem_access_ls [4:0] $end
    $var wire 32 ' pc_ex [31:0] $end
    $var wire 32 ( pc_ls [31:0] $end
    $var wire  1 U rf_we_ex [0:0] $end
    $var wire  1 V rf_we_ls [0:0] $end
    $var wire  1 =! rstn [0:0] $end
    $var wire  1 F! stall [0:0] $end
    $var wire  1 Q wb_rf_sel_ex [0:0] $end
    $var wire  1 R wb_rf_sel_ls [0:0] $end
   $upscope $end
   $scope module SegReg_ID_EX_inst $end
    $var wire 32 B! PC_RESET_VAL [31:0] $end
    $var wire  2 M alu_rs1_sel_ex [1:0] $end
    $var wire  2 L alu_rs1_sel_id [1:0] $end
    $var wire  2 O alu_rs2_sel_ex [1:0] $end
    $var wire  2 N alu_rs2_sel_id [1:0] $end
    $var wire  5 K br_type_ex [4:0] $end
    $var wire  5 J br_type_id [4:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 _ commit_ex [0:0] $end
    $var wire  1 ^ commit_id [0:0] $end
    $var wire  1 \ flush [0:0] $end
    $var wire 32 2 imm_ex [31:0] $end
    $var wire 32 1 imm_id [31:0] $end
    $var wire 32 , inst_ex [31:0] $end
    $var wire 32 + inst_id [31:0] $end
    $var wire  5 H mem_access_ex [4:0] $end
    $var wire  5 G mem_access_id [4:0] $end
    $var wire  5 F op_ex [4:0] $end
    $var wire  5 E op_id [4:0] $end
    $var wire 32 ' pc_ex [31:0] $end
    $var wire 32 & pc_id [31:0] $end
    $var wire 32 5 rdata1_ex [31:0] $end
    $var wire 32 4 rdata1_id [31:0] $end
    $var wire 32 7 rdata2_ex [31:0] $end
    $var wire 32 6 rdata2_id [31:0] $end
    $var wire  1 U rf_we_ex [0:0] $end
    $var wire  1 T rf_we_id [0:0] $end
    $var wire  1 =! rstn [0:0] $end
    $var wire  1 F! stall [0:0] $end
    $var wire  1 Q wb_rf_sel_ex [0:0] $end
    $var wire  1 P wb_rf_sel_id [0:0] $end
   $upscope $end
   $scope module SegReg_IF1_IF2_inst $end
    $var wire 32 B! PC_RESET_VAL [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 =! commit_if1 [0:0] $end
    $var wire  1 ] commit_if2 [0:0] $end
    $var wire  1 Z flush [0:0] $end
    $var wire 32 $ pc_if1 [31:0] $end
    $var wire 32 % pc_if2 [31:0] $end
    $var wire  1 =! rstn [0:0] $end
    $var wire  1 [ stall [0:0] $end
   $upscope $end
   $scope module SegReg_IF2_ID_inst $end
    $var wire 32 B! PC_RESET_VAL [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 ^ commit_id [0:0] $end
    $var wire  1 ] commit_if2 [0:0] $end
    $var wire  1 Z flush [0:0] $end
    $var wire 32 + inst_id [31:0] $end
    $var wire 32 * inst_if2 [31:0] $end
    $var wire 32 & pc_id [31:0] $end
    $var wire 32 % pc_if2 [31:0] $end
    $var wire  1 =! rstn [0:0] $end
    $var wire  1 [ stall [0:0] $end
   $upscope $end
   $scope module SegReg_LS_WB_inst $end
    $var wire 32 B! PC_RESET_VAL [31:0] $end
    $var wire 32 ? alu_result_ls [31:0] $end
    $var wire 32 @ alu_result_wb [31:0] $end
    $var wire  1 <! clk [0:0] $end
    $var wire  1 ` commit_ls [0:0] $end
    $var wire  1 >! commit_wb [0:0] $end
    $var wire  1 F! flush [0:0] $end
    $var wire 32 - inst_ls [31:0] $end
    $var wire 32 . inst_wb [31:0] $end
    $var wire 32 B mem_rdata_ls [31:0] $end
    $var wire 32 C mem_rdata_wb [31:0] $end
    $var wire 32 ( pc_ls [31:0] $end
    $var wire 32 ) pc_wb [31:0] $end
    $var wire  1 k read_ls [0:0] $end
    $var wire  1 V rf_we_ls [0:0] $end
    $var wire  1 W rf_we_wb [0:0] $end
    $var wire  1 =! rstn [0:0] $end
    $var wire  1 F! stall [0:0] $end
    $var wire  1 A! uncache_read_wb [0:0] $end
    $var wire  1 R wb_rf_sel_ls [0:0] $end
    $var wire  1 S wb_rf_sel_wb [0:0] $end
   $upscope $end
   $scope module WB_rf_wdata_mux $end
    $var wire 32 G! WIDTH [31:0] $end
    $var wire 32 @ din1 [31:0] $end
    $var wire 32 C din2 [31:0] $end
    $var wire 32 3 dout [31:0] $end
    $var wire  1 S sel [0:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


